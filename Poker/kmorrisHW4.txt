/* Author: Kevin Morris
 * Assignment 4: Poker Hands
 * This program takes a hand of values 2-9 from the user
 * and shows the most important hand availabile from it. */
#include <iostream>
#include <limits>
#include <map>
using namespace std;

const int HAND_SIZE = 5;

map<int, int> getCount(int hand[]);
map<int, int>& count();

typedef map<int, int>::iterator TableIter;

template<typename T>
void swap(T *p1, T *p2);

void sort(int hand[]);

/* We must define these functions somewhere */
bool containsPair(int hand[]);
bool containsTwoPair(int hand[]);
bool containsThreeOfaKind(int hand[]);
bool containsStraight(int hand[]);
bool containsFullHouse(int hand[]);
bool containsFourOfaKind(int hand[]);
bool containsNothing(int hand[]);

bool inputError(istream& is, int& n);

/* Main function */
int main()
{
    /* This variable is used to represent a constant number
    of possibilities in this program, for array construction */
    const int NUM_POSSIBLE = 7;

    /* Create function pointer array, we'll cycle through these
    and test them one by one via iteration */
    bool (*fn[NUM_POSSIBLE])(int[]) = {
        &containsFourOfaKind,
        &containsFullHouse,
        &containsStraight,
        &containsThreeOfaKind,
        &containsTwoPair,
        &containsPair,
        &containsNothing
    };

    // then create messages to match the function pointers
    const char *message[NUM_POSSIBLE] = {
        "Four Of a Kind!",
        "Full House!",
        "Straight!",
        "Three Of a Kind!",
        "Two Pair!",
        "Pair!",
        "High card!"
    };

    int hand[HAND_SIZE];

    cout << "Welcome to Easy Poker, where you get to choose all your "
         << "cards!\nEnter five numeric cards, ranged 2 - 9.\n\n";

    for(int i = 0; i < HAND_SIZE; ++i)
    {
        cout << "Card " << i + 1 << ": ";

        while(inputError(cin, hand[i]))
        {
            cerr << "Please enter a value 2-9 as instructed, thank you\n";
            cout << "Card " << i + 1 << ": ";
        }

    }

    // Scope singleton initialization out
    {
        map<int, int>& cardCount = count();
        cardCount = getCount(hand);
    }

    for(int i = 0; i < 7; ++i)
    {
        if(fn[i](hand))
        {
            cout << message[i] << endl;
            break;
        }
    }

    cout << "\nThank you for your playing at Choose Your "
         << "Outcome casino!\nGood bye.\n";

    return 0;
}

map<int, int> getCount(int hand[])
{
    map<int, int> same;

    // Initialize all to 0
    for(int i = 0; i < HAND_SIZE; ++i)
        same[hand[i]] = 0;

    // Increase each card in map by 1 for each one found
    for(int i = 0; i < HAND_SIZE; ++i)
        same[hand[i]] += 1;

    return same;
}

/* This function returns a static table for persistence
in the predefined prototyped functions */
map<int, int>& count()
{
    static map<int, int> table;
    return table;
}

// Swap any two identical typed pieces of memory
template<typename T>
void swap(T *p1, T *p2)
{
    T temp = *p1;
    *p2 = *p1;
    *p2 = temp;
}

// Selection sort
void sort(int hand[])
{
    int i, j, min;
    for(i = 0; i < HAND_SIZE - 1; ++i)
    {
        min = i;
        for(j = i + 1; j < HAND_SIZE; ++j)
        {
            if(hand[j] < hand[min])
                min = j;
        }

        if(min != i)
            swap(hand[i], hand[min]);

    }
}

// All of these contains functions are called in reverse order
bool containsPair(int hand[])
{
    map<int, int>& same = count();

    for(TableIter it = same.begin(); it != same.end(); ++it)
    {
        if(it->second == 2)
            return true;
    }

    return false;
}

bool containsTwoPair(int hand[])
{
    int pairs = 0;
    map<int, int>& same = count();

    for(TableIter it = same.begin(); it != same.end(); ++it)
    {
        if(it->second == 2)
            pairs += 1;
    }

    return pairs == 2;
}

bool containsThreeOfaKind(int hand[])
{
    map<int, int>& same = count();

    for(TableIter it = same.begin(); it != same.end(); ++it)
    {
        if(it->second == 3)
            return true;
    }

    return false;
}

bool containsStraight(int hand[])
{
    map<int, int>& same = count();
    bool isStraight = true;

    for(int i = 1, j = hand[0]; i < HAND_SIZE; ++i, j = hand[i - 1])
    {
        if(hand[i] != j + 1)
            return false;
    }

    return true;
}

/* If we get get this far, all we need to do is find out
if the number of unique cards is equal to 2 to determine four of a kind */
bool containsFullHouse(int hand[])
{
    return count().size() == 2;
}

bool containsFourOfaKind(int hand[])
{
    sort(hand);
    return !containsThreeOfaKind(hand) && count().size() == 2;
}

// If we hit this function, we've already tried to match
// every other type of hand possible
bool containsNothing(int hand[])
{
    return true;
}

bool inputError(istream& is, int& n)
{
    if(!(is >> n))
    {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        return true;
    }

    return n < 2 || n > 9;
}

/* Example output
[kevr@bit poker]$ ./poker 
Welcome to Easy Poker, where you get to choose all your cards!
Enter five numeric cards, ranged 2 - 9.

Card 1: 8
Card 2: 7
Card 3: 8
Card 4: 2
Card 5: 3
Pair!

Thank you for your playing at Choose Your Outcome casino!
Good bye.
[kevr@bit poker]$ ./poker 
Welcome to Easy Poker, where you get to choose all your cards!
Enter five numeric cards, ranged 2 - 9.

Card 1: 9
Card 2: 9
Card 3: 6
Card 4: 6
Card 5: 6
Full House!

Thank you for your playing at Choose Your Outcome casino!
Good bye.
[kevr@bit poker]$ ./poker 
Welcome to Easy Poker, where you get to choose all your cards!
Enter five numeric cards, ranged 2 - 9.

Card 1: 5
Card 2: 3
Card 3: 6
Card 4: 4
Card 5: 7
Straight!

Thank you for your playing at Choose Your Outcome casino!
Good bye.
[kevr@bit poker]$ ./poker 
Welcome to Easy Poker, where you get to choose all your cards!
Enter five numeric cards, ranged 2 - 9.

Card 1: 8 
Card 2: 8
Card 3: 2
Card 4: 2
Card 5: 9
Two Pair!

Thank you for your playing at Choose Your Outcome casino!
Good bye.
[kevr@bit poker]$ ./poker 
Welcome to Easy Poker, where you get to choose all your cards!
Enter five numeric cards, ranged 2 - 9.

Card 1: 3
Card 2: 3
Card 3: 3
Card 4: 8
Card 5: 7
Three Of a Kind!

Thank you for your playing at Choose Your Outcome casino!
Good bye.
[kevr@bit poker]$
*/
